#!/usr/bin/env node

const startAutoUnlock = require("../services/seatUnlocker") ;

/**
 * Module dependencies.
 */
var app = require("../app");
var debug = require("debug")("goal-zone-b:server");
var http = require("http");
var connectDb = require("../utils/db");

// ✅ Import socket.io
var { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Setup Socket.IO
 */
var io = new Server(server, {
  cors: {
    origin: " http://localhost:3000", // change to frontend url in production
    methods: ["GET", "POST"],
  },
});

// Handle socket connections
io.on("connection", (socket) => {
  console.log("🔗 User connected:", socket.id);

  socket.on("lockSeat", (data) => {
    console.log("Seat locked:", data);
    io.emit("seatLocked", data); // broadcast to all
  });

  socket.on("bookSeat", (data) => {
    console.log("Seat booked:", data);
    io.emit("seatBooked", data);
  });

  socket.on("disconnect", () => {
    console.log("❌ User disconnected:", socket.id);
  });
});

// ✅ Make io available inside controllers
app.set("io", io);

/**
 * Listen on provided port, on all network interfaces.
 */
connectDb()
  .then(() => {
    server.listen(port);
    startAutoUnlock()
    server.on("error", onError);
    server.on("listening", onListening);
  })
  .catch((err) => {
    console.error("Error connecting to MongoDB:", err);
    process.exit(1);
  });

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
